# Generated by Django 3.1.5 on 2021-04-07 15:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('emp_main', '0003_auto_20201221_1329'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='datapoint',
            name='origin_description',
        ),
        migrations.AlterField(
            model_name='datapoint',
            name='origin_id',
            field=models.TextField(blank=True, help_text='This id used if the datapoint metadata is (partly) configured in an external service (e.g. BEMCom) and should be used in the curren service (e.g. the EMP). This field allows matching the ids of the external service with id maintained by the current service, which effectively allows the current service to useadditional datapoints that do not exist in the external service, which is handy for mocking UIs and stuff.', null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='datapoint',
            name='short_name',
            field=models.TextField(blank=True, default=None, help_text='A short name to identify the datapoint.', max_length=30, null=True, unique=True),
        ),
        migrations.CreateModel(
            name='DatapointValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, default=None, help_text='The last value of the datapoint. Will be a string or null. Values of numeric datapoints are sent as strings too, as this drastically reduces effort for implementing the REST interfaces.', null=True)),
                ('value_float', models.FloatField(blank=True, default=None, help_text='Similar to value but an internal float representation for numeric datapoints.', null=True)),
                ('timestamp', models.DateTimeField(default=None, help_text='For sensor datapoints: The time the value was received by the connector.\nFor actuator datapoints: The time the message was created by the external entity.\nBoth in milliseconds since 1970-01-01 UTC.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatapointSetpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setpoint', models.JSONField(blank=True, default=list, help_text='A JSON array holding zero or more DatapointSetpointItems.')),
                ('timestamp', models.DateTimeField(blank=True, default=None, help_text='The time the message was created by the external entity in milliseconds since 1970-01-01 UTC.', null=True)),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatapointSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.JSONField(blank=True, default=list, help_text='A JSON array holding zero or more DatapointScheduleItems.')),
                ('timestamp', models.DateTimeField(default=None, help_text='The time the message was created by the external entity in milliseconds since 1970-01-01 UTC.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='datapointvalue',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Value msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='datapointsetpoint',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Setpoint msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='datapointschedule',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Schedule msg unique for timestamp'),
        ),
    ]
