# Generated by Django 3.2.13 on 2022-04-21 19:36

from django.db import migrations, models
import django.db.models.deletion
import esg.django_models.datapoint
import esg.models.datapoint
import timescale.db.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.TextField(blank=True, default=None, help_text='This name is used if the datapoint metadata is (partly) configured in an external application (e.g. BEMCom) and should be used in the current service (e.g. the EMP). This effectively allows the current application to use additional datapoints that do not exist in the external service, which is handy for mocking UIs and stuff.', null=True)),
                ('origin_id', models.TextField(blank=True, default=None, help_text='In combination with `origin`, this field allows matching the ids of the external application with id maintained by the current application. Note: this field is a string as not all external applications might use integers as IDs, e.g. consider MQTT topics.', null=True)),
                ('short_name', models.TextField(blank=True, default=None, help_text='A short name to identify the datapoint.', null=True, unique=True)),
                ('type', models.CharField(choices=[('sensor', 'Sensor'), ('actuator', 'Actuator')], default=None, help_text='Datapoints can either be of type `sensor` (readable) or `actuator` (writeable).', max_length=8)),
                ('data_format', models.CharField(choices=[('generic_numeric', 'Generic Numeric'), ('continuous_numeric', 'Continuous Numeric'), ('discrete_numeric', 'Discrete Numeric'), ('generic_text', 'Generic Text'), ('discrete_text', 'Discrete Text'), ('bool', 'Boolean'), ('unknown', 'Unknown')], default=esg.models.datapoint.DatapointDataFormat['unknown'], help_text='Format of the datapoint value. Additionally defines which metadata is available for it. See Enum docs for details.', max_length=18)),
                ('description', models.TextField(blank=True, default='', help_text='A human readable description of the datapoint targeted on users of the API wihtout knowledge about hardware details.')),
                ('allowed_values', models.JSONField(blank=True, default=None, help_text='Allowed values. Applicable to discrete valued datapoints only.', null=True)),
                ('min_value', models.FloatField(blank=True, default=None, help_text='The minimal expected value of the datapoint. None means no constraint. Only applicable to `Continuous Numeric` datapoints.', null=True)),
                ('max_value', models.FloatField(blank=True, default=None, help_text='The maximum expected value of the datapoint. None means no constraint. Only applicable to `Continuous Numeric` datapoints.', null=True)),
                ('unit', models.TextField(blank=True, default='', help_text='The unit in SI notation, e.g.  Mg*m*s^-2 aka. kN. Only applicable to `Numeric` datapoints.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValueMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('value', models.JSONField(blank=True, default=None, help_text='The value as JSON encoded string. This value can e.g. be a measured value of a sensor datapoint or a set value pushed to an actuator datapoint.', null=True)),
                ('_value_float', models.FloatField(blank=True, default=None, help_text='Similar to value but an internal float representation to store numeric values more efficiently.', null=True)),
                ('_value_bool', models.BooleanField(blank=True, default=None, help_text='Similar to value but an internal bool representation to store boolean values more efficiently.', null=True)),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SetpointMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('setpoint', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=list, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='A setpoint, i.e. a list holding zero or more `SetpointItem`.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduleMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('schedule', models.JSONField(decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='A schedule, i.e. a list holding zero or more `ScheduleItem`.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastValueMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.JSONField(blank=True, default=None, help_text='The payload of the last received value message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received value message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_value_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastSetpointMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setpoint', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='The payload of the last received setpoint message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received setpoint message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_setpoint_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastScheduleMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='The payload of the last received schedule message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received schedule message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_schedule_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='datapoint',
            constraint=models.UniqueConstraint(fields=('origin', 'origin_id'), name='Datapoint unique for origin and origin_id'),
        ),
        migrations.AddConstraint(
            model_name='valuemessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Value msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='setpointmessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Setpoint msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='schedulemessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Schedule msg unique for timestamp'),
        ),
    ]
