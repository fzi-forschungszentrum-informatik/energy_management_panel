# Generated by Django 3.2.13 on 2022-05-18 09:04

from django.db import migrations, models
import django.db.models.deletion
import esg.django_models.datapoint
import esg.models.datapoint
import timescale.db.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.TextField(blank=True, default=None, help_text='This name is used if the datapoint metadata is (partly) configured in an external application (e.g. BEMCom) and should be used in the current service (e.g. the EMP). This effectively allows the current application to use additional datapoints that do not exist in the external service, which is handy for mocking UIs and stuff.', null=True)),
                ('origin_id', models.TextField(blank=True, default=None, help_text='In combination with `origin`, this field allows matching the ids of the external application with id maintained by the current application. Note: this field is a string as not all external applications might use integers as IDs, e.g. consider MQTT topics.', null=True)),
                ('short_name', models.TextField(blank=True, default=None, help_text='A short name to identify the datapoint.', null=True)),
                ('type', models.CharField(choices=[('Sensor', 'Sensor'), ('Actuator', 'Actuator')], default=None, help_text='Datapoints can either be of type `sensor` (readable) or `actuator` (writeable).', max_length=8)),
                ('data_format', models.CharField(choices=[('Generic Numeric', 'Generic Numeric'), ('Continuous Numeric', 'Continuous Numeric'), ('Discrete Numeric', 'Discrete Numeric'), ('Generic Text', 'Generic Text'), ('Discrete Text', 'Discrete Text'), ('Boolean', 'Boolean'), ('Unknown', 'Unknown')], default=esg.models.datapoint.DatapointDataFormat['unknown'], help_text='Format of the datapoint value. Additionally defines which metadata is available for it. See Enum docs for details.', max_length=18)),
                ('description', models.TextField(blank=True, default='', help_text='A human readable description of the datapoint targeted on users of the API wihtout knowledge about hardware details.')),
                ('allowed_values', models.JSONField(blank=True, default=None, help_text='Allowed values. Applicable to discrete valued datapoints only.', null=True)),
                ('min_value', models.FloatField(blank=True, default=None, help_text='The minimal expected value of the datapoint. None means no constraint. Only applicable to `Continuous Numeric` datapoints.', null=True)),
                ('max_value', models.FloatField(blank=True, default=None, help_text='The maximum expected value of the datapoint. None means no constraint. Only applicable to `Continuous Numeric` datapoints.', null=True)),
                ('unit', models.TextField(blank=True, default='', help_text='The unit in SI notation, e.g.  Mg*m*s^-2 aka. kN. Only applicable to `Numeric` datapoints.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='A meaningful name for the plant. Should be short but precise. Is used in e.g. in plots to analyses the product quality.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='A meaningful name for the product. Should be short but precise. Is used in e.g. in plots to analyses the product quality.', unique=True)),
                ('service_url', models.TextField(help_text='The URL of the product service.')),
                ('coverage_from', models.DurationField(help_text='For any run given time a product run is started this is the difference between the start time and the begin of the covered time range, i.e. the time range for which forecasts or schedules are computed. E.g. if a run started at `2022-02-02T03:00:52` and `coverage_from` is `P0DT01H15M00S` then we expect the first forecasted value at time larger or equal `2022-02-02T04:15:52`.')),
                ('coverage_to', models.DurationField(help_text='For any run given time a product run is started this is the difference between the start time and the end of the covered time range, i.e. the time range for which forecasts or schedules are computed. E.g. if a run started at `2022-02-02T03:00:52` and `coverage_from` is `P0DT05H15M00S` then we expect the last forecasted value at time less then `2022-02-02T08:15:52`.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValueMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('value', models.JSONField(blank=True, default=None, help_text='The value as JSON encoded string. This value can e.g. be a measured value of a sensor datapoint or a set value pushed to an actuator datapoint.', null=True)),
                ('_value_float', models.FloatField(blank=True, default=None, help_text='Similar to value but an internal float representation to store numeric values more efficiently.', null=True)),
                ('_value_bool', models.BooleanField(blank=True, default=None, help_text='Similar to value but an internal bool representation to store boolean values more efficiently.', null=True)),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SetpointMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('setpoint', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=list, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='A setpoint, i.e. a list holding zero or more `SetpointItem`.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduleMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('schedule', models.JSONField(decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='A schedule, i.e. a list holding zero or more `ScheduleItem`.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PVSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('azimuth_angle', models.FloatField(help_text='The azimuth angle indicates the deviation of a photovoltaic module from the South. As coordinates are counted clockwise, for the East negative values are used, for the West positive ones. The unit of the azimuth angle is degrees °. ')),
                ('inclination_angle', models.FloatField(help_text='The inclination angle describes the deviation of the photovoltaic modules from the horizontal, e.g. an inclination angle of 0° indicates that the module faces right up.The unit of the inclination angle is degrees °. ')),
                ('nominal_power', models.FloatField(help_text='The nominal power is a quantity specified in the data sheet of the PV module and measured at Standard Test Conditions (STC) by the manufacturer. The unit of the nominal power is kWp.')),
                ('_power_datapoint', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_pv_system', to='emp_main.datapoint')),
                ('plant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='_pv_system', to='emp_main.plant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available_at', models.DateTimeField(help_text='Will be forwarded to product services and trigger those to compute only with data that has been available at this time.')),
                ('coverage_from', models.DateTimeField(help_text='The covered time span by this product run is equal or larger this value.')),
                ('coverage_to', models.DateTimeField(help_text='The covered time span by this product run is less this value.')),
                ('_product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_runs', to='emp_main.product')),
                ('plants', models.ManyToManyField(related_name='product_runs', to='emp_main.Plant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='plant',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='_plants', to='emp_main.Product'),
        ),
        migrations.CreateModel(
            name='LastValueMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.JSONField(blank=True, default=None, help_text='The payload of the last received value message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received value message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_value_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastSetpointMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setpoint', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='The payload of the last received setpoint message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received setpoint message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_setpoint_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastScheduleMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.JSONField(blank=True, decoder=esg.django_models.datapoint.ScheduleSetpointJSONDecoder, default=None, encoder=esg.django_models.datapoint.ScheduleSetpointJSONEncoder, help_text='The payload of the last received schedule message.', null=True)),
                ('time', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last received schedule message.', null=True)),
                ('datapoint', models.OneToOneField(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='last_schedule_message', to='emp_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeographicPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(help_text='Latitude angle (North: +, South: -) of the position in degree.')),
                ('longitude', models.FloatField(help_text='Longitude angle (West: -, East: +) of the position in degree.')),
                ('height', models.FloatField(blank=True, help_text='Height above ground surface. This is optional and `null` (i.e. the default) means that the value is not specified.', null=True)),
                ('plant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='_geographic_position', to='emp_main.plant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ForecastMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(default=None, help_text='The time corresponding to the value was measured or the message was created.', interval='1 day')),
                ('mean', models.FloatField(help_text='The expected value at `time`.')),
                ('std', models.FloatField(blank=True, help_text='The standard deviation (uncertainty) of `mean` at `time`. This assumes that the forecast error is Gaussian distributed.', null=True)),
                ('p05', models.FloatField(blank=True, help_text='The 5% percentile of the forecast, i.e. it is predicted that finally observed value is larger then this value with a probability of 95%.', null=True)),
                ('p10', models.FloatField(blank=True, help_text='The 10% percentile of the forecast, i.e. it is predicted that finally observed value is larger then this value with a probability of 90%.', null=True)),
                ('p25', models.FloatField(blank=True, help_text='The 25% percentile of the forecast, i.e. it is predicted that finally observed value is larger then this value with a probability of 75%.', null=True)),
                ('p50', models.FloatField(blank=True, help_text='The 50% percentile of the forecast, i.e. the median.', null=True)),
                ('p75', models.FloatField(blank=True, help_text='The 75% percentile of the forecast, i.e. it is predicted that finally observed value is smaller then this value with a probability of 75%.', null=True)),
                ('p90', models.FloatField(blank=True, help_text='The 90% percentile of the forecast, i.e. it is predicted that finally observed value is smaller then this value with a probability of 90%.', null=True)),
                ('p95', models.FloatField(blank=True, help_text='The 95% percentile of the forecast, i.e. it is predicted that finally observed value is smaller then this value with a probability of 95%.', null=True)),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the forecast message belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='forecast_messages', to='emp_main.datapoint')),
                ('product_run', models.ForeignKey(help_text='The product run that has generated the forecast message.', on_delete=django.db.models.deletion.CASCADE, related_name='forecast_messages', to='emp_main.productrun')),
            ],
        ),
        migrations.AddConstraint(
            model_name='datapoint',
            constraint=models.UniqueConstraint(fields=('origin', 'origin_id'), name='Datapoint unique for origin and origin_id'),
        ),
        migrations.AddConstraint(
            model_name='valuemessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Value msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='setpointmessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Setpoint msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='schedulemessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time'), name='Schedule msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='forecastmessage',
            constraint=models.UniqueConstraint(fields=('datapoint', 'time', 'product_run'), name='Forecast Message Unique.'),
        ),
    ]
