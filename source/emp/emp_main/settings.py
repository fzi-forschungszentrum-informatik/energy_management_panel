"""
Django settings for emp_main project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import json
import random
import string
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
if not os.getenv("DJANGO_SECRET_KEY"):
    # This generates a new random key every time we start the application or
    # run anything from manage.py. This also invalidates all cookies which
    # makes users login again. Thus, it is a good idea to fix the key in
    # production.
    # However, this only works if we have only a single worker. If there are
    # more then one, each will get a dedicated SECRET_KEY which will cause
    # permanent suspicious session warnings.
    if int(os.getenv("N_WORKER_PROCESSES") or 1) == 1:
        SECRET_KEY = "".join(
            random.choice(string.ascii_letters) for i in range(64)
        )
    else:
        raise ValueError(
            "DJANGO_SECRET_KEY must be set explicitly if django-api is "
            "run with N_WORKER_PROCESSES > 1."
        )
else:
    SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if (os.getenv("DJANGO_DEBUG") or "FALSE").lower() == "true":
    DEBUG = True

ALLOWED_HOSTS = json.loads(os.getenv("DJANGO_ALLOWED_HOSTS") or '["localhost"]')
if os.getenv("DJANGO_ADMINS"):
    ADMINS = json.loads(os.getenv("DJANGO_ADMINS"))

# Application definition
INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "guardian",
    #    "rest_framework",
    #    "rest_framework.authtoken",
    #    "drf_spectacular",
    #    "django_filters",
    "ninja",
    "emp_main.apps.EmpMainConfig",
    "emp_demo_ui_app.apps.EmpDemoUiAppConfig",
    "emp_demo_dp_interface.apps.EmpDemoDpInterfaceConfig",
    "emp_django_authenticator.apps.EmpDjangoAuthenticatorConfig",
    # Uncomment to activate the emp_evaluation_system app.
    # Note that additional depedencies must be installed too.
    # "emp_evaluation_system.apps.EmpEvaluationSystemConfig",
    # "nested_admin",
    # "multiselectfield",
]

# Define all installed apps which extend the EMP functionality.
# This is used to automatically wire up the urls to these apps and to
# automatically generate the user permissions for these apps.
# This process expects that each app holds a apps.py and urls.py file following
# the conventions shown in emp_demo_ui_app.
EMP_APPS = [
    "emp_demo_ui_app",
    "emp_demo_dp_interface",
    "emp_django_authenticator",
    # "emp_evaluation_system",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # this is django default.
    "guardian.backends.ObjectPermissionBackend",  # required for guardian.
)

ROOT_URLCONF = "emp_main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "emp_main.wsgi.application"
ASGI_APPLICATION = "emp_main.asgi.application"

# TODO: Replace this with Redis for Prod.
CHANNEL_LAYERS = {
    "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
if os.getenv("EMPDB_HOST"):
    DATABASES = {
        "default": {
            "ENGINE": "timescale.db.backends.postgresql",
            "HOST": os.getenv("EMPDB_HOST"),
            "PORT": int(os.getenv("EMPDB_PORT") or 5432),
            "USER": os.getenv("EMPDB_USER") or "emp",
            "PASSWORD": os.getenv("EMPDB_PASSWORD") or "emp",
            "NAME": os.getenv("EMPDB_DBNAME") or "emp",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR.parent / "db.sqlite3",
        }
    }

# This is just here to silence some warnings and make explicit what
# django < 3.2 has always done. See:
# https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-DEFAULT_AUTO_FIELD
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Logging inspired by suggestions in practical django book.
# This configures one explicit logger per app, as this allows us
# to identify the source of a log message easily.
log_level = os.getenv("LOGLEVEL") or "INFO"

loggers = {}
# Explicitly add emp_main, as log messages from it won't be displayed else.
for emp_app in EMP_APPS + [
    "emp_main",
]:
    loggers[emp_app] = {
        "handlers": ["console", "prometheus"],
        "level": log_level,
        "propagate": True,
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(asctime)s-%(name)s-%(levelname)s: %(message)s"}
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "emp_main.loggers.StreamHandlerPlusIPs",
            "formatter": "simple",
        },
        "prometheus": {
            "level": "DEBUG",
            "class": "emp_main.loggers.PrometheusHandler",
        },
    },
    "loggers": loggers,
    "root": {"handlers": ["console", "prometheus"], "level": log_level},
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
# fmt: off
AUTH_PASSWORD_VALIDATORS = [
    # NOQA here as breaking these lines won't improve readability.
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # NOQA
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # NOQA
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # NOQA
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # NOQA
    },
]
# fmt: on

# The default value (1000) prevents us from deleting larger number of items
# with Django Admin. See also:
# https://docs.djangoproject.com/en/3.1/ref/settings/#data-upload-max-number-fields
DATA_UPLOAD_MAX_NUMBER_FIELDS = None

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

# Don't place media files in source folder but next to it.
MEDIA_ROOT = BASE_DIR.parent / "media"
MEDIA_URL = "/media/"

# ------------------------------------------------------------------------------
# Special settings for REST API
# ------------------------------------------------------------------------------

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "emp_main.authentication.TokenAuthenticationBearer",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "EMP API",
    "LICENSE": {"name": "Licensed under MIT"},
    "VERSION": "0.1.0",
}

# ------------------------------------------------------------------------------
# Here the EMP specific settings.
# ------------------------------------------------------------------------------

# The string for the <title> tag.
PAGE_TITLE = "EMP Demo"

# The path to the manifest.json file within the static files.
MANIFEST_JSON_STATIC = "emp-main/manifest.json"

# The path to the favicon.ico file within the static files.
FAVICON_ICO_STATIC = "emp-main/icons/favicon.ico"

# The path to the logo displayed in the left corner of the top nav bar,
# as usual within static files.
TOPBAR_LOGO_STATIC = "emp-main/icons/title-logo.png"

# Strings to display in the top navbar.
TOPBAR_NAME_SHORT = "EMP"
TOPBAR_NAME_LONG = "Energy Management Panel"

# A list of URLS that are excluded from permission checking, i.e. that can be
# accessed by any user at all times. This is required to allow access to pages
# generic pages like login/logout or the home page, if those are not part of
# an UI app.
URLS_PERMISSION_WHITELIST = [
    "/welcome/",
    "/auth/login/",
    "/auth/logout/",
]

# Users will be redirected to this page if visiting the sites root.
HOME_PAGE_URL = "/welcome/"

# Defines the URLS that are placed in the login/logout buttons in the
# EMPBaseView. Use ?next= to redirect after login/logout.
LOGIN_PAGE_URL = "/auth/login/?next=%s" % HOME_PAGE_URL
LOGOUT_PAGE_URL = "/auth/logout/?next=%s" % HOME_PAGE_URL

# EPM evaluation page update interval in milliseconds
# EMP_EVALUATION_PAGE_UPDATE_INTERVAL = 60000
